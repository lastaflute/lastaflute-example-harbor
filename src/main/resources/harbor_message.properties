
# ========================================================================================
#                                                                        Framework Default
#                                                                        =================
# ----------------------------------------------------------
#                                            Javax Validator
#                                            ---------------
constraints.AssertFalse.message = must be false
constraints.AssertTrue.message  = must be true
constraints.DecimalMax.message  = must be less than ${inclusive == true ? 'or equal to ' : ''}{value}
constraints.DecimalMin.message  = must be greater than ${inclusive == true ? 'or equal to ' : ''}{value}
constraints.Digits.message      = numeric value out of bounds (<{integer} digits>.<{fraction} digits> expected)
constraints.Email.message       = not a well-formed email address
constraints.Future.message      = must be in the future
constraints.Max.message         = must be less than or equal to {value}
constraints.Min.message         = must be greater than or equal to {value}
constraints.NotBlank.message    = may not be empty
constraints.NotEmpty.message    = may not be empty
constraints.NotNull.message     = may not be null
constraints.Null.message        = must be null
constraints.Past.message        = must be in the past
constraints.Pattern.message     = invalid format
constraints.Size.message        = size must be between {min} and {max}

# ----------------------------------------------------------
#                                        Hibernate Validator
#                                        -------------------
constraints.CreditCardNumber.message        = invalid credit card number
constraints.EAN.message                     = invalid {type} barcode
constraints.Length.message                  = length must be between {min} and {max}
constraints.LuhnCheck.message               = The check digit for ${value} is invalid, Luhn Modulo 10 checksum failed
constraints.Mod10Check.message              = The check digit for ${value} is invalid, Modulo 10 checksum failed
constraints.Mod11Check.message              = The check digit for ${value} is invalid, Modulo 11 checksum failed
constraints.ModCheck.message                = The check digit for ${value} is invalid, ${modType} checksum failed
constraints.ParametersScriptAssert.message  = script expression "{script}" didn't evaluate to true
constraints.Range.message                   = must be between {min} and {max}
constraints.SafeHtml.message                = may have unsafe html content
constraints.ScriptAssert.message            = script expression "{script}" didn't evaluate to true
constraints.URL.message                     = must be a valid URL

# ----------------------------------------------------------
#                                       LastaFlute Validator
#                                       --------------------
constraints.Required.message                = is required
constraints.TypeAny.message                 = should be {propertyType}
constraints.TypeInteger.message             = should be number
constraints.TypeLong.message                = should be number
constraints.TypeLocalDate.message           = should be date
constraints.TypeLocalDateTime.message       = should be date-time
constraints.TypeBoolean.message             = should be boolean

# ----------------------------------------------------------
#                                      Application Exception
#                                      ---------------------
# /- - - - - - - - - - - - - - - - - - - - - - - - - - - - -
# six framework-embedded messages (don't change key names)
# - - - - - - - - - -/
errors.login.failure=could not login
errors.app.illegal.transition=retry because of illegal transition
errors.app.db.already.deleted=others might be deleted, so retry
errors.app.db.already.updated=others might be updated, so retry
errors.app.db.already.exists=already existing data, so retry
errors.app.double.submit.request=double submit might be requested


# _/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/_/
# you can define your messages here:
# e.g.
#  errors.xxx = ...
#  info.xxx = ...
# _/_/_/_/_/_/_/_/_/_/
# ========================================================================================
#                                                                                  General
#                                                                                  =======
# ----------------------------------------------------------
#                                      Application Validator
#                                      ---------------------
# e.g. 
#  org.docksidestage.validator.constraints.SeaLand.message = ...

# ----------------------------------------------------------
#                                      Application Exception
#                                      ---------------------
# e.g. 
#  errors.sea.land.already.crowded = ...


# ========================================================================================
#                                                                                  Sign up
#                                                                                  =======
errors.signup.account.already.exists=the account already exists so input others

